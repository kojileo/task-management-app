# Azure Pipelines YAML file

trigger:
  branches:
    include:
      - develop # developブランチへのプルリクエストをトリガー
pr: none # PRトリガーのみを使用するため、CIトリガーは無効化

pool:
  vmImage: 'ubuntu-latest' # MicrosoftホステッドエージェントのUbuntu最新版を使用

variables:
  # --- 以下の変数をAzure DevOpsのパイプライン設定で定義してください ---

  # 1. Snyk APIトークン
  # Azure DevOpsの「Variables」で 'SNYK_API_TOKEN' という名前で、値をSnykのトークンにして「Keep this value secret」にチェックを入れてください。
  SNYK_API_TOKEN: $(YourSnykApiToken) # パイプライン変数 (Secret) で設定してください

  # --- 固定値または環境に応じて変更する変数 ---
  # TARGET_BRANCH_SECURITY_REPO: 'main' # CI直接スキャンでは通常不要
  COMMIT_USER_EMAIL: 'pipeline@azuredevops.com' # Gitコミット時のメールアドレス (SnykがGit情報を利用する場合など、必要に応じて残す)
  COMMIT_USER_NAME: 'Azure DevOps Pipeline' # Gitコミット時のユーザー名 (同上)
  # TEMP_SECURITY_REPO_PATH: '$(Agent.TempDirectory)/security-repo-clone' # CI直接スキャンでは通常不要

steps:
- checkout: self # プルリクエスト元のリポジトリ (ソースリポジトリ) をチェックアウト
  persistCredentials: true # 後続のステップで `System.AccessToken` を使用できるようにする場合 (今回はPATを使用)

- task: Bash@3
  displayName: 'Configure Git (if needed by Snyk or other tools)'
  inputs:
    targetType: 'inline'
    script: |
      git config --global user.email "$(COMMIT_USER_EMAIL)"
      git config --global user.name "$(COMMIT_USER_NAME)"
      echo "Git user configured (if Snyk or other tools require local Git info)."

# Copy PR content to Security Repository タスクは削除されました

- task: NodeTool@0 # Snyk CLIの実行にはNode.jsが必要
  inputs:
    versionSpec: '18.x' # 必要に応じてNode.jsのバージョンを指定
  displayName: 'Install Node.js'

- task: Bash@3
  displayName: 'Install Snyk CLI'
  inputs:
    targetType: 'inline'
    script: |
      npm install -g snyk
      snyk --version
    failOnStderr: false

- task: Bash@3
  displayName: 'Run Snyk Vulnerability Check on Source Repository'
  env:
    SNYK_TOKEN: $(SNYK_API_TOKEN) # 環境変数としてSnykトークンを渡す
  inputs:
    targetType: 'inline'
    script: |
      set -eo pipefail # パイプラインでエラーが発生した場合、またはコマンドがエラーを返した場合にスクリプトを終了

      echo "Installing Python dependencies..."
      pip install -r e2e/aitest/requirements.txt

      echo "Authenticating Snyk..."
      snyk auth "$SNYK_TOKEN"

      echo "Running Snyk scan in $(Build.SourcesDirectory)..."

      snyk test --all-projects --severity-threshold=critical

      # もし `snyk code test` (SAST) も実行したい場合は以下のように追加できます。
      snyk code test --all-projects

      echo "Snyk scan completed."
    failOnStderr: true # 標準エラー出力があった場合にタスクを失敗させる (Snykがエラーコードで制御するので通常は不要だが念のため)